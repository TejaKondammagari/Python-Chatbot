# -*- coding: utf-8 -*-
"""Python Chatbot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fUejvKea0LNumS8pPgSRaB_4MZD6R1_P
"""

#Description: This is a 'self learning' chatbot program

#Install the package NLTK
#pip install nltk

# Install the package newspaper3k 
#pip install newspaper3k

#import libraries
 # Import libraries
from newspaper import Article
import random
import string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk
import numpy as np
import warnings

# Ignore any warning messages
warnings.filterwarnings('ignore')

# Download the packages from NLTK
nltk.download('punkt', quiet = True)
nltk.download('wordnet' , quiet = True)

# Get the article URL
article = Article('https://www.mayoclinic.org/diseases-conditions/chronic-kidney-disease/symptoms-causes/syc-20354521')
article.download()
article.parse()

# Applies natural language processing
article.nlp()

corpus = article.text

# Prints all the information from the website
#print(corpus)

# Tokenization
text = corpus

# Converting text into list of sentences
sent_tokens = nltk.sent_tokenize (text) 
#print (sent_tokens)

# Create a dictionary (key:value) pair to remove punctuations
remove_punct_dict = dict ( (ord(punct),None) for punct in string.punctuation)

# Print the punctuations
#print (string.punctuation)

# Print the dictionary
#print (remove_punct_dict)

# Create a function to return a list of lemmatized lower case words after removing punctuations
def LemNormalize (text):
	return nltk.word_tokenize(text.lower().translate(remove_punct_dict)) 
# Lowering everything so that computer can differentiate
# difference between upper and lower, also removing the punctuations

# Printing the tokenization text, this enables to see all the words in list 
# as a bunch of tokens
#print(LemNormalize(text))

# Keyword Matching

# Greeting Inputs
GREETING_INPUTS = ["hi", "hello", "hola", "greetings", "wassup", "hey"]

# Greeting responses back to the user 
GREETING_RESPONSES =[ "howdy", "hi", "hey", "what's good", "hello", "hey there"]

# Function to return a random greeting response to a user's greeting
def greeting(sentence):
	# if the user's input is a greeting, then return a randomly chosen greeting response
	for word in sentence.split():
		if word.lower() in GREETING_INPUTS:
			return random.choice (GREETING_RESPONSES)

# Machine learning aspect

# Generate the response
def response(user_response):

	# The user's response / query
	#user_response = 'What is chronic kidney disease?'
 
	user_response = user_response.lower() # Makes the response lower

	### Print the user's response
	#print (user_response)


	# Set the chatbot response to an empty string 
	robo_response = ''

	# Append the user's response to the sentence list
	sent_tokens.append(user_response)

	### Print the sentence list after appending the user's response
	#print(sent_tokens)


	# Create a TfidfVectorizer Object 
	# (Tf means Term Frequency, like how frequently a term appears in a document)
	# (idf means inverse document frequency, measures how rare a word is in the 
	# document)
	# (Tfidf means it is a product of the two, both values are being multipled together)
	TfidfVec = TfidfVectorizer(tokenizer = LemNormalize, stop_words = 'english')

	# Converts the text to a matrix of TF-IDF features
	tfidf = TfidfVec.fit_transform(sent_tokens)

	### Print the TFIDF features
	#print (tfidf)

	# Get the measure of similarity (similarity scores)
	vals = cosine_similarity(tfidf[-1], tfidf)

	# Get the index of the most similar text/sentence to the user's response
	idx = vals.argsort()[0][-2] # sorts the setences based on similarity
							# should use -2 because -1 is the user's response

	# Reduce the dimensionality of vals
	# Right now, vals is a list of lists, now we will make it into a single list
	flat = vals.flatten()

	# Sort the list in ascending order
	flat.sort()

	# Get the most similar score to the user's response
	score = flat[-2]

	# Print the similarity score
	#print (score)

	# If the variable 'score' is 0, then there is no text similar to the user's response
	if (score == 0):
		robo_response = robo_response+ "I apologize, I don't understand." 

	else:
		robo_response = robo_response + sent_tokens[idx]

	# Print the chat bot response
	# print (robo_response)
  
	return robo_response

flag = True
print("DOCBot: I am Doctor Bot or DOCBot")
while (flag == True):
  user_response = input()
  user_response = user_response.lower()
  if (user_response != 'bye'):
    if (user_response == 'thanks' or user_response == 'thank you'):
      flag = False
      print ("DOCBot: You are welcome!")
    else:
      if (greeting(user_response) != None):
        print("DOCBot: "+greeting(user_response))
      else:
        print("DOCBot: "+response(user_response))
        sent_tokens.remove(user_response)
  else:
    flag = False
    print("DOCBot: Chat with you later !")

